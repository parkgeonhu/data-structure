1. 교과서 15장에서는 List에 iterator를 달아 놓는 방법에 대해 이야기 하고 있다. 즉, Separate Class Iterator와 Inner Class Iterator가 있을 수 있다. 두가지 방식을 비교 분석 해보라. 어떤 것이 어떤 경우에 좋고 그 비용은 어떠한지 설명해 보라.

 inner class iterator 같은 경우, ADT의 자료에 직접 접근할 수 있기 때문에 separate class iterator 보다 빠릅니다. 
 seperate class iterator 같은 경우, 데이터에 직접적인 접근을 할 수 없어 다른 종류의 iterator 보다 시간이 오래걸립니다. 또 스택 같은 특정 자료구조에서는 데이터에 직접 접근하기 어렵기 때문에 사용하기 힘듭니다. 구현이 일반적으로 간단하고, 여러 개의 독립적인 클래스 iterator가 동시에 존재할 수 있습니다.



2. 그래서 달아 놓으면 좋아지는 것은 무엇일까? 치러야 하는 비용은 뭘까? 즉 무엇을 주고 무엇을 얻는 일인지 설명 해 보라.


이와 같은 Iterator 개체를 사용하면 size 메서드를 얻어와서 반복 처리하는 것보다 속도에서 불리합니다. 이는 Iterator 개체를 사용하는 부분이 있기 때문에 불가피한 사항입니다. 하지만 컬렉션 종류에 관계없이 일관성있게 프로그래밍할 수 있다는 장점을 갖고 있습니다. 소스 코드에 어떠한 컬렉션을 사용할 지 정해지지 않았지만 컬렉션 내에 보관한 모든 내용을 출력하는 등의 작업을 할 때, Iterator 사용이 좋습니다.
다시 말해, 처리 속도를 주고 코드의 공통성, 통합성을 얻는 일입니다.
