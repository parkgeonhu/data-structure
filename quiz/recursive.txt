1. 교과서 257쪽 exercise 5

char [] givenArray={'a','b','c','d','e'};
String s=getReverse(givenArray, givenArray.length())
public String getReverse(char [] givenArray, int index) {
	if(index>0){
		return givenArray[--index]+ reverse(givenArray, index);
	}
    	return "";
}


2. 교과서 249쪽 “A poor solution to a simple problem”에서는 Fibonacci 수열의 합을 구하는 프로그램을 recursion을 사용해서 구하는 방법을 보였다. 무엇이 문제이고 어떻게 하면 된다는 이야기 인가? 교과서에서 하고자 하는 이야기가 뭔지 설명하라.

재귀(Recursion)를 이용해 아래로 내려가는 Top-Down 방법과 0번째 부터 n 번째 까지 더해가며 구하는 Bottom-Up 방법을 사용했다. 시간복잡도가 재귀를 이용했을 때는 O(2^2/n), 반복문을 이용했을 때는 O(n)이 나온다.

재귀를 이용한 피보나치 수열의 시간복잡도
T(n) : fib(n)을 계산하기 위하여 fib함수를 호출하는 횟수 (재귀 트리 상의 노드의 개수)
T(0)=1 (0일 수도 있다)
T(1)=1
T(n)=T(n-1) + T(n-2) +1 for(n>=2)

2^1 x T(n-2) => T(n-1)이 T(n-2)보다 크기 때문에 T(n-1)+T(n-2) > T(n-2)+T(n-2)
2^2 x T(n-4)
2^3 x T(n-6)
...
2^n/2 x T(0)
= 2^n/2

재귀를 이용한 방식은 이해하기는 쉽지만, 위와 같이  앞에서 결과를 낸 것을 한번 더 계산해야 하는 방식(T(n)=T(n-1) + T(n-2) +1)이기 때문에 시간복잡도상 비효율적이다. 따라서 반복문을 이용하여 계산하는 것이 시간복잡도상 빠르기 때문에 이것을 해결 방법으로 추천하고 있다.





