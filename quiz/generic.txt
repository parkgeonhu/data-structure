1.     어차피 목표는 programming in general이다. Java에서는 Object라는 최상위 class가 있다. 이것을 이용하면 되는데 구테여 generic data type을 만들어 사용 하는 이유를 설명하라.

데이터 타입이 Object면, 모든 객체가 될 수 있다. 그렇기 때문에 의도한 객체가 아니라 어떤 데이터 타입이 와도 컴파일 에러가 발생하지 않는다. 대신 런타임 에러가 발생한다. 
컴파일 언어의 기본은 모든 에러는 컴파일이 발생할 수 있도록 유도해야 한다는 것이다. 런타임은 실제로 애플리케이션이 동작하고 있는 상황이기 때문에 런타임에 발생하는 에러는 항상 심각한 문제를 초래할 수 있기 때문이다. 위와 같은 에러를 타입에 대해서 안전하지 않다고 한다. 즉 모든 타입이 올 수 있기 때문에 타입을 엄격하게 제한 할 수 없게 되는 것이다. 
따라서 genric data type을 만들어 사용자는 컴파일 단계에서 warning 메시지를 확인할 수 있다. 또한 중복의 제거와 타입 안정성을 동시에 추구할 수 있기 때문에 Object라는 최상위 클래스를 사용하지 않고  generic data type을 만들어 사용한다.

// stackoverflow https://stackoverflow.com/questions/5207115/java-generics-t-vs-object
Two advantages:

no need of casting (the compiler hides this from you)
compile time safety that works. If the Object version is used, you won't be sure that the method always returns Foo. If it returns Bar, you'll have a ClassCastException, at runtime.

generic data type 사용시 얻을 수 있는 이점 : 캐스팅이 필수가 아니다. 런타임에서 발생하는 에러를 사전에 컴파일 단계에서 알 수 있어 안정성 측면에서 좋다. 

 

2.     교과서 93쪽 2.7장에서는 무슨 문제가 있고, 어떻게 하라는 이야기 인가? 설명하라.

2.7장
배열을 만들기 위해서, 생성자는 배열의 크기(bag의 크기)를 정해줘야한다. 우리는 비어있는 bag를 만들기 때문에 생성자는 필드를 0으로 설정해야한다.
배열 bag의 선언에서 제네릭 데이터 타입을 선언하기로 결정한 것은 생성자안에서 이 배열을 할당한 것에 영향을 미친다.
bag = new T[capacity]; // syntax error
배열을 할당할 때는 제네릭 타입을 사용하지 못한다. 대신 우리는 Object를 선언할 수 있다.
bag = new Object[capacity];
왜냐하면 당신은 T[]에 Object[]를 부여하지 못하기 때문이다. // 호환 불가능(not compatible)
그래서 다음과 같이 캐스팅이 필요하다.
bag = (T[]) new Object[capacity];
컴파일러는 경고할 것이다. 컴파일러는 너에게 Object와 generic type의 캐스팅이 안전한지 확실히 하라고 한다. 배열은 방금 할당된 것이고, 그것은 null enrty다. 따라서 캐스팅은 안전하다. 그래서 우리는 컴파일러에게 annotation을 적어줌으로써 무시하라고 할 수 있다.

따라서 2.7장의 문제점은 @SuppressWarnings(“unchecked”) 어노테이션(annotation)을 선언 전에 명시한다면 해결할 수 있다. 코드의 형 안전성(typesafe) 보장을 위해 모든 무점검 경고는, 가능하다면 없애야 한다. 제거할 수 없는 경고 메시지는 형 안정성이 확실할 때만 @SuppressWarnings(“unchecked”) 어노테이션(annotation)을 사용한다. 이것을 사용하게 된다면, 왜 형(type) 안전성을 위반하지 않는지 밝히는 주석을 반드시 붙여야 한다.

